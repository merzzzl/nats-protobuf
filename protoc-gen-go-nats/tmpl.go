	package main
	
	var tmpl = `// Code generated by protoc-gen-go-nats. DO NOT EDIT.
	
	{{- $protoPkgName := .GetPackage}}
	package {{.GetOptions.GetGoPackage | package}}

	import (
		"context"
	
		"github.com/tudatravel/nats-protobuf"
		"google.golang.org/protobuf/encoding/protojson"
	)

	{{- range .GetService}}
	{{- $svcName := .GetName}}
	type {{$svcName}}BrokerSubscriber interface {
		{{- range .GetMethod}}
		{{.GetName}}(context.Context, func(context.Context, *{{.GetOutputType | base}}) error) error
		{{- end}}
	}
	
	type {{$svcName}}BrokerPublisher interface {
		{{- range .GetMethod}}
		{{.GetName}}(context.Context, *{{.GetInputType | base}}) error
		{{- end}}
	}
	
	type {{$svcName}}BrokerClient interface {
		Subscriber() {{$svcName}}BrokerSubscriber
		Publisher() {{$svcName}}BrokerPublisher
	}
	
	type {{$svcName}}BrokerServer interface {
		Serve() error
	}
	
	type {{$svcName | lower}}BrokerSubscriber struct {
		broker broker.Broker
	}
	
	type {{$svcName | lower}}BrokerPublisher struct {
		broker broker.Broker
	}
	
	type {{$svcName | lower}}BrokerClient struct {
		broker broker.Broker
	}
	
	type {{$svcName | lower}}BrokerServer struct {
		broker  broker.Broker
		handler {{$svcName}}Server
	}

	func New{{$svcName}}BrokerClient(b broker.Broker) {{$svcName}}BrokerClient {
		return &{{$svcName | lower}}BrokerClient{
			broker: b,
		}
	}
	
	func (b *{{$svcName | lower}}BrokerClient) Subscriber() {{$svcName}}BrokerSubscriber {
		return &{{$svcName | lower}}BrokerSubscriber{
			broker: b.broker,
		}
	}
	
	func (b *{{$svcName | lower}}BrokerClient) Publisher() {{$svcName}}BrokerPublisher {
		return &{{$svcName | lower}}BrokerPublisher{
			broker: b.broker,
		}
	}
	
	{{- range .GetMethod}}
	func (b *{{$svcName | lower}}BrokerSubscriber) {{.GetName}}(ctx context.Context, handle func(ctx context.Context, in *{{.GetOutputType | base}}) error) error {
		fn := func(ctx context.Context, subject string, msg []byte) error {
			in := &{{.GetOutputType | base}}{}
			err := protojson.Unmarshal(msg, in)
			if err != nil {
				return err
			}
			return handle(ctx, in)
		}
		return b.broker.Sub("{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.response", fn)
	}
	
	func (b *{{$svcName | lower}}BrokerPublisher) {{.GetName}}(ctx context.Context, in *{{.GetInputType | base}}) error {
		msg, err := protojson.Marshal(in)
		if err != nil {
			return err
		}
		return b.broker.Pub(ctx, "{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.request", msg)
	}
	{{end}}
	
	func New{{$svcName}}BrokerServer(b broker.Broker, h {{$svcName}}Server) {{$svcName}}BrokerServer {
		return &{{$svcName | lower}}BrokerServer{
			broker:  b,
			handler: h,
		}
	}
	
	{{- range .GetMethod}}
	func (b *{{$svcName | lower}}BrokerServer) serve{{.GetName}}(ctx context.Context, msg []byte) error {
		in := &{{.GetInputType | base}}{}
		err := protojson.Unmarshal(msg, in)
		if err != nil {
			return err
		}
		out, err := b.handler.{{.GetName}}(ctx, in)
		if err != nil {
			return err
		}
		msg, err = protojson.Marshal(out)
		if err != nil {
			return err
		}
		return b.broker.Pub(ctx, "{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.response", msg)
	}
	{{- end}}
	
	func (b *{{$svcName | lower}}BrokerServer) Serve() error {
		fn := func(ctx context.Context, subject string, msg []byte) error {
			switch subject {
			{{- range .GetMethod}}
			case "{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.request":
				return b.serve{{.GetName}}(ctx, msg)
			{{- end}}
			default:
				return nil
			}
		}
		return b.broker.Sub("{{$protoPkgName}}.{{$svcName | lower}}.*.request", fn)
	}
	{{- end}}
`