package main

var tmpl = `// Code generated by protoc-gen-go-nats. DO NOT EDIT.
{{$protoPkgName := .GetPackage}}
package {{.GetOptions.GetGoPackage | package}}

import (
	"context"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/tudatravel/nats-protobuf/broker"
	"golang.org/x/sync/errgroup"
)
{{range .GetService}}
{{- $svcName := .GetName}}
type {{$svcName}}Client interface {
	{{- range .GetMethod}}
	{{.GetName}}(context.Context, *{{.GetInputType | base}}) (*{{.GetOutputType | base}}, error)
	{{.GetName}}Pub(context.Context, *{{.GetInputType | base}}) error
	{{.GetName}}Sub(context.Context, func(context.Context, *{{.GetOutputType | base}}) error) error
	{{- end}}
}

type {{$svcName}}Server interface {
	{{- range .GetMethod}}
	{{.GetName}}(context.Context, *{{.GetInputType | base}}) (*{{.GetOutputType | base}}, error)
	{{- end}}
}

type {{$svcName | lower}}Client struct {
	timeout time.Duration
	broker  broker.Broker
}

type {{$svcName | lower}}Server struct {
	handler {{$svcName}}Server
	broker  broker.Broker
}

func Register{{$svcName}}Server(broker broker.Broker, handler {{$svcName}}Server) {
	s := &{{$svcName | lower}}Server{
		handler: handler,
		broker:  broker,
	}
	broker.RegisterHandler(s)
}

func New{{$svcName}}Client(broker broker.Broker, timeout time.Duration) {{$svcName}}Client {
	s := &{{$svcName | lower}}Client{
		broker:  broker,
		timeout: timeout,
	}
	return s
}
{{range .GetMethod}}
func (s *{{$svcName | lower}}Server) {{.GetName}}NATS() error {
	{{.GetName | lower}}Func := func(ctx context.Context, data []byte) ([]byte, error) {
		in := &{{.GetInputType | base}}{}
		err := proto.Unmarshal(data, in)
		if err != nil {
			return nil, nil
		}
		out, err := s.handler.{{.GetName}}(ctx, in)
		if err != nil {
			return nil, nil
		}
		return proto.Marshal(out)
	}
	err := s.broker.Conn().Subscribe(
		"nats.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}",
		"{{$protoPkgName}}",
		{{.GetName | lower}}Func,
	)
	return err
}

func (s *{{$svcName | lower}}Server) {{.GetName}}JS() error {
	{{.GetName | lower}}Func := func(ctx context.Context, data []byte) ([]byte, error) {
		in := &{{.GetInputType | base}}{}
		err := proto.Unmarshal(data, in)
		if err != nil {
			return nil, nil
		}
		out, err := s.handler.{{.GetName}}(ctx, in)
		if err != nil {
			return nil, nil
		}
		return proto.Marshal(out)
	}
	err := s.broker.Conn().StreamSubscribe(
		"js.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.request",
		"js.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.responce",
		"{{$protoPkgName}}",
		{{.GetName | lower}}Func,
	)
	return err
}

func (s *{{$svcName | lower}}Client) {{.GetName}}(ctx context.Context, in *{{.GetInputType | base}}) (*{{.GetOutputType | base}}, error) {
	req, err := proto.Marshal(in)
	if err != nil {
		return nil, err
	}
	rsp, err := s.broker.Conn().Publish(
		ctx,
		"nats.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}",
		req,
		s.timeout,
	)
	if err != nil {
		return nil, err
	}
	out := &{{.GetOutputType | base}}{}
	err = proto.Unmarshal(rsp, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (s *{{$svcName | lower}}Client) {{.GetName}}Pub(ctx context.Context, in *{{.GetInputType | base}}) error {
	req, err := proto.Marshal(in)
	if err != nil {
		return err
	}
	err = s.broker.Conn().StreamPublish(
		ctx,
		"js.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.request",
		req,
	)
	if err != nil {
		return err
	}
	return nil
}

func (s *{{$svcName | lower}}Client) {{.GetName}}Sub(ctx context.Context, f func(context.Context, *{{.GetOutputType | base}}) error) error {
	{{.GetName | lower}}Func := func(ctx context.Context, data []byte) ([]byte, error) {
		in := &{{.GetOutputType | base}}{}
		err := proto.Unmarshal(data, in)
		if err != nil {
			return nil, nil
		}
		err = f(ctx, in)
		return nil, err
	}
	err := s.broker.Conn().StreamSubscribe(
		"js.{{$protoPkgName}}.{{$svcName | lower}}.{{.GetName | lower}}.response",
		"",
		"{{$protoPkgName}}",
		{{.GetName | lower}}Func,
	)
	return err
}
{{end}}
func (s *{{$svcName | lower}}Server) Serve() error {
	err := s.broker.AddStream("{{$protoPkgName}}", "js.{{$protoPkgName}}.{{$svcName | lower}}.>")
	if err != nil {
		return err
	}
	var wg errgroup.Group
	{{- range .GetMethod}}
	wg.Go(s.{{.GetName}}NATS)
	wg.Go(s.{{.GetName}}JS)
	{{- end}}
	return wg.Wait()
}
{{- end}}
`
